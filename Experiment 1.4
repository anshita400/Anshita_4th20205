//Aim:Design a program for a basic banking system that calculates the average account balance by dividing the total balance by the number of account holders and verifies //transaction IDs from an array. The program should demonstrate robust exception handling using multiple try-catch blocks to manage two specific scenarios: an //ArithmeticException for division by zero when there are no account holders and an ArrayIndexOutOfBoundsException for accessing invalid indices in the transaction ID array.

 
import java.util.Scanner;

public class BankingSystem {

    public static void main(String[] args) {
        double[] accountBalances = {1000.50, 2500.75, 800.25};
        String[] transactionIDs = {"T123", "T124", "T125"};

        try {
            double totalBalance = 0;
            for (double balance : accountBalances) {
                totalBalance += balance;
            }
            if (accountBalances.length == 0) {
                throw new ArithmeticException("No account holders.");
            }
            double averageBalance = totalBalance / accountBalances.length;
            System.out.println("Average Account Balance: " + averageBalance);
        } catch (ArithmeticException e) {
            System.out.println("Error: " + e.getMessage());
        }

        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter transaction ID index to verify: ");
        int index = scanner.nextInt();

        try {
            System.out.println("Transaction ID: " + transactionIDs[index]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error: Invalid transaction ID index.");
        }
    }
}
//Enter transaction ID index to verify: 1
//Transaction ID: TXN124
